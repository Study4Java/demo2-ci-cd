name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]   # push 到 main 分支时触发
  pull_request:
    branches: [ "main" ]

jobs:
  test-ssh-key:
    runs-on: ubuntu-latest
    steps:
      - name: Test SSH login
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no sunchenhao@10.195.28.136 "echo 'SSH works!'"

  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 安装 JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. 编译 & 测试
      - name: Build with Maven
        run: mvn clean package -DskipTests=false

      # 4. 登录 Docker Hub（需要在 GitHub Secrets 配置 DOCKER_USERNAME 和 DOCKER_PASSWORD）
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. 构建并推送镜像
      - name: Build and push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/springboot-ci-cd-demo
          docker build -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:latest

      # 6. 部署（这里演示：推送到服务器，可以用 ssh）
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/springboot-ci-cd-demo:latest
            docker stop springboot-demo || true
            docker rm springboot-demo || true
            docker run -d --name springboot-demo -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/springboot-ci-cd-demo:latest

# 实验
